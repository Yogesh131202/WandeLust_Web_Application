
#################################### EJS mate ###############################
1. use for the reusability of the code 
2. we just add it app.js :- const ejsMate = require("ejs-mate");

####################################### express Router ########################################
1. use for the restructuring the code (means to organize our code)
2. for parent child conflict use :- const router = express.Router({mergeParams: true});

#################################### Web Cookies #########################################
1. Http is a small block of data created by a web server while a user is browsing a website and places on the user computer
   or other device by the user's web browser.
2. Cookies also help to browser which path we follow to visit that page.
3. it use for the personalisation, tracking, and other uses.

################################## sending cookies ########################################
1. res.cookie(name , value); // use to sending cookies using express.

################################## cookie parser ########################################
1. cokie parser is use to parse name value pair of the cookies/data
2. const cookieParser = require("cookie-parser"); // you have to install it before use :- npm i cookie-parser.

################################## signed cookie  ########################################
1. this type of cookies are used to check cookie data are come in orignal format or any changes are made.
2. signed cooki have some secret code .
3. app.use(cookieParser("secretcode"));
   res.cookie(name , value, {signed: true});

################################# Stateful & Stateless protocol ##################################
1. Stateful protocol :- stateful protocol require server to save the status and session information. eg. FTP
2. Stateless protocol :- stateless protocol does not require the server to retain the server information. eg. http.

##################################### express sessions ####################################
1. session :- connection between client and server without breaking.
2. sessions :- it is use to store temporary information in the form of cookie .
3. express-session :- it is npm package it create a session middleware with options. 
(NOTE :- IF WE OPEN SAME WEBSITE IN DIFFERENT TAB THEN THAT TRATED AS ONE SAME SESSION)
4. session options :- resave: false, saveinitialized:true etc..
5. storing and using session info :- 
         - FOR STORING :- syntax = app.get("/register", (req,res)=>{
            let {name= "anonnymous"} = req.query;
            req.session.name = name;
            res.redirect("/hello");
         })
         -FOR ACCESSING :- syntax = app.get("/hello", (req,res)=>{
            res.send(`Hello, ${req.session.name}`);
         })

6. session is use to storing useful information and accessing it in single session.


###################################### connect-flash ##################################
1. The flash is the special area of session used for storing message. Messages are written to the flash and clear
   being after display to the user.
2. for flash message in the webpage we use (res.locals())
3. in flash messege shown only one time after that how much time we refresh it message can't be visible.


############################## Authentication & Authorization ####################################
1. Authentication :- Authentication is the process of verifying who someone is.
2. Authorization :- Authorization is the process of verifying what specific applications, files, and data a user has access to.
3. Storing password :- We never stored password as it is. we stored there hashed form.
4. IN SIGN UP :- In sign up take password from user and convert it to the hashed form.
5. IN LOGIN :- In login take password from user and convert it to hashed form and compared with the password have in the database.

####################################### Hashing #########################################
NOTE :- 1. For every input there is a fixed output.
        2. They are one-way functions, we cann't get input form output.
        3. For different input there is different output but same length.
        4. Small changes in input bring large changes in output.
        5. commonly use hashing function :- SHA256, MD5, bcrypt.

####################################### Salting ######################################
1. Password salting is a technique to protect password stored in a databases by adding a string of 32 or more
   characters and then hashing them.

####################################### Passport (Authentication library) #############################
1. it is javascript library for the authentication .

################################## MVC (MODEL VIEW CONTROLLERS) ####################
1. It is framework or design pattern for our project 
2. MVC is use to organize our code files/codes to batter redability and understandablity

#################################### for rating ###################################
1. for rating styyle we use STARABILITY LIBRARY .

#################################### for understanding multipart/formdata for backend ###################################
1. USE MULTER
2. Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. 

#################################### library for the connecting env file to backend ###################################
1. DOTENV LIBRARY .

###################################### GEOCODING ###############################
1. Geocoding is the process of converting addresses (like street addresses) into geographic coordinates 
   (like latitude and longitude) which you can use to place markers on a map or position the map.
   

########################## mongodb atlas username password ####################
username :- Yogesh_1312
password :- STnuJ17HMiAyQnta

mongodb+srv://Yogesh_1312:STnuJ17HMiAyQnta@cluster0.bbowxsi.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0